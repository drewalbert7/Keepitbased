const nodemailer = require('nodemailer');
const logger = require('../utils/logger');

class EmailService {
  constructor() {
    this.transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT,
      secure: false,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      }
    });
  }

  async sendAlert(email, alertData) {
    try {
      const levelColors = {
        small: '#fbbf24',
        medium: '#f97316', 
        large: '#dc2626'
      };

      const levelEmojis = {
        small: 'ðŸŸ¡',
        medium: 'ðŸŸ ',
        large: 'ðŸ”´'
      };

      const color = levelColors[alertData.level];
      const emoji = levelEmojis[alertData.level];

      const html = `
        <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="color: white; margin: 0; font-size: 28px;">KeepItBased Alert ${emoji}</h1>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div style="background: ${color}; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
              <h2 style="margin: 0 0 10px 0; font-size: 24px;">
                ${alertData.level.toUpperCase()} BUY SIGNAL
              </h2>
              <p style="margin: 0; font-size: 18px; font-weight: 600;">
                ${alertData.assetType.toUpperCase()} ${alertData.symbol}
              </p>
            </div>
            
            <div style="margin: 20px 0;">
              <p style="font-size: 18px; margin: 10px 0;">
                <strong>Current Price:</strong> $${alertData.currentPrice.toFixed(2)}
              </p>
              <p style="font-size: 18px; margin: 10px 0;">
                <strong>Drop:</strong> ${alertData.dropPercentage}%
              </p>
              <p style="font-size: 18px; margin: 10px 0;">
                <strong>Baseline Price:</strong> $${alertData.baselinePrice.toFixed(2)}
              </p>
            </div>
            
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid ${color};">
              <p style="margin: 0; font-size: 16px; color: #555;">
                ${alertData.message}
              </p>
            </div>
            
            <div style="text-align: center; margin-top: 30px;">
              <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}" 
                 style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        color: white; padding: 15px 30px; text-decoration: none; 
                        border-radius: 8px; font-weight: 600; display: inline-block;">
                View in App
              </a>
            </div>
            
            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; color: #777; font-size: 14px;">
              <p>This alert was generated by KeepItBased at ${new Date(alertData.timestamp).toLocaleString()}</p>
              <p>To manage your alerts, <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}" style="color: #667eea;">log in to your account</a></p>
            </div>
          </div>
        </div>
      `;

      const mailOptions = {
        from: `"KeepItBased" <${process.env.SMTP_USER}>`,
        to: email,
        subject: `${emoji} ${alertData.level.toUpperCase()} Alert: ${alertData.symbol} dropped ${alertData.dropPercentage}%`,
        html: html
      };

      await this.transporter.sendMail(mailOptions);
      logger.info(`Alert email sent to ${email} for ${alertData.symbol}`);
    } catch (error) {
      logger.error('Error sending alert email:', error);
    }
  }

  async sendWelcome(email, firstName) {
    try {
      const html = `
        <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="color: white; margin: 0; font-size: 28px;">Welcome to KeepItBased! ðŸš€</h1>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <h2 style="color: #333; margin-bottom: 20px;">Hi ${firstName}!</h2>
            
            <p style="font-size: 16px; line-height: 1.6; color: #555;">
              Thanks for joining KeepItBased! You're now ready to never miss another buying opportunity in crypto and stocks.
            </p>
            
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="margin-top: 0; color: #333;">Get Started:</h3>
              <ul style="margin: 0; padding-left: 20px; color: #555;">
                <li style="margin: 8px 0;">Set up alerts for your favorite crypto and stocks</li>
                <li style="margin: 8px 0;">Customize your thresholds (Small: 5%, Medium: 10%, Large: 15%)</li>
                <li style="margin: 8px 0;">Get notified when prices drop and it's time to buy the dip!</li>
              </ul>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}" 
                 style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        color: white; padding: 15px 30px; text-decoration: none; 
                        border-radius: 8px; font-weight: 600; display: inline-block;">
                Start Setting Up Alerts
              </a>
            </div>
            
            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; color: #777; font-size: 14px;">
              <p>Happy investing!</p>
              <p>The KeepItBased Team</p>
            </div>
          </div>
        </div>
      `;

      const mailOptions = {
        from: `"KeepItBased" <${process.env.SMTP_USER}>`,
        to: email,
        subject: 'Welcome to KeepItBased - Start Getting Buy Alerts! ðŸš€',
        html: html
      };

      await this.transporter.sendMail(mailOptions);
      logger.info(`Welcome email sent to ${email}`);
    } catch (error) {
      logger.error('Error sending welcome email:', error);
    }
  }

  async sendUsernameRecovery(email) {
    try {
      const html = `
        <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="color: white; margin: 0; font-size: 28px;">KeepItBased - Username Recovery</h1>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <h2 style="color: #333; margin-bottom: 20px;">Username Recovery Request</h2>
            
            <p style="font-size: 16px; line-height: 1.6; color: #555;">
              You requested to recover your username for KeepItBased.
            </p>
            
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #667eea;">
              <p style="margin: 0; font-size: 18px; font-weight: 600; color: #333;">
                Your username is: <span style="color: #667eea;">${email}</span>
              </p>
            </div>
            
            <p style="font-size: 16px; line-height: 1.6; color: #555;">
              You can now use this email address to log in to your KeepItBased account.
            </p>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/login" 
                 style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        color: white; padding: 15px 30px; text-decoration: none; 
                        border-radius: 8px; font-weight: 600; display: inline-block;">
                Go to Login
              </a>
            </div>
            
            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; color: #777; font-size: 14px;">
              <p>If you didn't request this, please ignore this email.</p>
              <p>The KeepItBased Team</p>
            </div>
          </div>
        </div>
      `;

      const mailOptions = {
        from: `"KeepItBased" <${process.env.SMTP_USER}>`,
        to: email,
        subject: 'KeepItBased - Your Username Recovery',
        html: html
      };

      await this.transporter.sendMail(mailOptions);
      logger.info(`Username recovery email sent to ${email}`);
    } catch (error) {
      logger.error('Error sending username recovery email:', error);
    }
  }

  async sendPasswordReset(email, resetToken) {
    try {
      const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
      
      const html = `
        <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="color: white; margin: 0; font-size: 28px;">KeepItBased - Password Reset</h1>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <h2 style="color: #333; margin-bottom: 20px;">Reset Your Password</h2>
            
            <p style="font-size: 16px; line-height: 1.6; color: #555;">
              You requested a password reset for your KeepItBased account. Click the button below to set a new password.
            </p>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="${resetUrl}" 
                 style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        color: white; padding: 15px 30px; text-decoration: none; 
                        border-radius: 8px; font-weight: 600; display: inline-block;">
                Reset My Password
              </a>
            </div>
            
            <div style="background: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ffc107;">
              <p style="margin: 0; font-size: 14px; color: #856404;">
                <strong>Security Note:</strong> This link will expire in 1 hour for your security. 
                If you didn't request this reset, please ignore this email.
              </p>
            </div>
            
            <p style="font-size: 14px; line-height: 1.6; color: #777;">
              If the button doesn't work, you can copy and paste this link into your browser:
              <br><a href="${resetUrl}" style="color: #667eea; word-break: break-all;">${resetUrl}</a>
            </p>
            
            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; color: #777; font-size: 14px;">
              <p>This password reset was requested at ${new Date().toLocaleString()}</p>
              <p>The KeepItBased Team</p>
            </div>
          </div>
        </div>
      `;

      const mailOptions = {
        from: `"KeepItBased" <${process.env.SMTP_USER}>`,
        to: email,
        subject: 'KeepItBased - Reset Your Password',
        html: html
      };

      await this.transporter.sendMail(mailOptions);
      logger.info(`Password reset email sent to ${email}`);
    } catch (error) {
      logger.error('Error sending password reset email:', error);
    }
  }
}

module.exports = new EmailService();